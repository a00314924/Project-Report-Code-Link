#include <Keypad.h>

// Define pins
#define PIR_PIN 2
#define TRIG_PIN 3
#define ECHO_PIN 4
#define BUZZER_PIN 5
#define RED_LED 6
#define GREEN_LED 7

// Keypad setup 4x4
 const byte ROWS = 4;
 const byte COLS = 4;
 char keys[ROWS][COLS] = { // layout of numbers and letters that are on keypad
      {'1', '2', '3', 'A'},
      {'4', '5', '6', 'B'},
      {'7', '8', '9', 'C'},
       {'*', '0', '#', 'D'}
};
   byte rowPins[ROWS] = {9, 10, 11, 12}; // keypad link up pins
   byte colPins[COLS] = {52, 50, 48, 46}; // keypad link up pins
   Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS); 

// Security settings
    String rightPin = "1234"; // correct pin
    String enteredPIN = ""; //entered pin
    bool systemArmed = false; //starts off 
    bool triggered = false; // checks if alarm is triggered
    unsigned long MotionTIME = 0; // 0 second delay after sensed 
    const unsigned long CDT = 10000; // countdown timer lenght
    int LPT = -1; // last printed countdown value and takes away one
    unsigned long LLtt = 0; // Track the last time the LED was on
    const unsigned long LedFlash = 500; // Red LED flash
    int ZONE_T = 0; // Track which zone was triggered 
    bool PIR_T = false; // checks if PIR sensor is triggered
    unsigned long L_PIR_T = 0; // last time the PIR sensor was triggered
    const unsigned long PIR_D_t = 2000; // Debounce time for PIR

      void setup() {
      // Initialize pins and inputs or outputs
      pinMode(PIR_PIN, INPUT);
      pinMode(TRIG_PIN, OUTPUT);
      pinMode(ECHO_PIN, INPUT);
      pinMode(BUZZER_PIN, OUTPUT);
      pinMode(RED_LED, OUTPUT);
      pinMode(GREEN_LED, OUTPUT);

         // Initialize Serial Monitor
         Serial.begin(9600);
         Serial.println("System Initialized. Enter PIN to arm.");

    // Turn on the red LED when the system is disarmed
    digitalWrite(RED_LED, HIGH);
    digitalWrite(GREEN_LED, LOW); // green led off
}

void loop() {
      // System is not armed and alarm is not triggered
    if (!systemArmed && !triggered) {
        char key = keypad.getKey();
    if (key) {
        delay(100); // delay
        Serial.print("Key pressed: "); //prints the key that was pressed on keypad
        Serial.println(key);

    if (key == '#') { // Confirm PIN and sends it off to be checked against the correct pin
        Serial.print("PIN: ");
        Serial.println(enteredPIN);

    if (enteredPIN == rightPin) {
        systemArmed = true; // system is armed and checking for motion
        digitalWrite(GREEN_LED, HIGH); // Turn on green LED
        digitalWrite(RED_LED, LOW);   // Turn off red LED
        Serial.println("System Armed. Waiting for motion..."); //tells you that the system is armed
 } else {
        Serial.println("Wrong PIN! Please Try again."); //prints wrong pin message
}
        enteredPIN = ""; // Reset PIN 
 } else {
        enteredPIN += key; // checks key against entered PIN
    }}
  }
        // System is armed and alarm is not triggered
  else if (systemArmed && !triggered) {
        // Checks the PIR sensor 
    if (digitalRead(PIR_PIN) == HIGH && !PIR_T && (millis() - L_PIR_T >= PIR_D_t)) {
       PIR_T = true; // makes PIR sensor as triggered
       L_PIR_T = millis(); // Record the last trigger time
       ZONE_T = 1; // Zone 1 triggered
      MotionTIME = millis(); // Record the time motion was detected
      Serial.println("Zone 1: Motion detected, Alarm will trigger in:"); //pritns zone thats triggered message 
       Serial.println("10");
      LPT = 10; // the last printed time
}

  // Checks the ultrasonic sensor
  if (detectMotionWithUltrasonic() && ZONE_T == 0) {
   ZONE_T = 2; // Zone 2 triggered
    MotionTIME = millis(); // Record the time motion was detected
     Serial.println("Zone 2: Motion detected, Alarm will trigger in:"); //pritns zone thats triggered message 
     Serial.println("10");
   LPT = 10; //the last printed time
}

  // If motion is detected this starts the countdown
  if (ZONE_T != 0) {
     unsigned long currentTime = millis();
     unsigned long elapsedTime = currentTime - MotionTIME;

  // Calculate the remaining time
  int remainingTime = (CDT - elapsedTime) / 1000;

  // Print the countdown if the remaining time has changed
  if (remainingTime != LPT && remainingTime >= 0) {
    Serial.println(remainingTime);
    LPT = remainingTime; // Update the last printed time
  }

  // lets the PIN be allowed to be entered during the countdown to disarm the alarm before it goes off
   char key = keypad.getKey();
     if (key) {
       delay(100); //delay
        Serial.print("Key pressed: ");
        Serial.println(key);

     if (key == '#') { // Confirm PIN and sends it off to be checked against the correct pin
      Serial.print("PIN: ");
      Serial.println(enteredPIN);

     if (enteredPIN == rightPin) {
       systemArmed = false; // Disarms the system
       ZONE_T = 0; // Reset the zone
      PIR_T = false; // Reset PIR 
        digitalWrite(RED_LED, HIGH); // Turn on red LED
        digitalWrite(GREEN_LED, LOW); // Turn off green LED
        Serial.println("System Disarmed. Enter PIN to arm again.");
  } else {
        Serial.println("Wrong PIN! Please Try again."); //prints wrong pin messagee
  }
          enteredPIN = ""; // Reset PIN 
  } else {
          enteredPIN += key; // checks entered pin against Key
} }

  // If the countdown finishes, turn on the alarm
    if (elapsedTime >= CDT) {
    triggerAlarm();
 }}
}
  // Alarm is triggered
     else if (triggered) {
      // Flash the red LED
       unsigned long currentTime = millis();
   if (currentTime - LLtt >= LedFlash) {
     LLtt = currentTime;
     digitalWrite(RED_LED, !digitalRead(RED_LED)); // Toggle the red LED
}

  // turns on the buzzer
  tone(BUZZER_PIN, 1000); 

  // lets the PIN be allowed to be entered during the countdown to disarm the alarm before it goes off
  char key = keypad.getKey();
  if (key) {
     delay(100);// delay
     Serial.print("Key pressed: ");
     Serial.println(key);

  if (key == '#') { // checks PIN
    Serial.print("Entered PIN: ");
    Serial.println(enteredPIN);

  if (enteredPIN == rightPin) {
       triggered = false; // turns off the system
       systemArmed = false; // Reset system 
       ZONE_T = 0; // Reset zone
       PIR_T = false; // Reset pir
    digitalWrite(RED_LED, HIGH); // Turn on red LED
    digitalWrite(GREEN_LED, LOW); // Turn off green LED
    noTone(BUZZER_PIN); // Stops the buzzer
     Serial.println("System Disarmed. Enter PIN to arm again.");
  } else {
    Serial.println("Wrong PIN! Please Try again."); //wrong pin entered message
 }
  enteredPIN = ""; // Reset pin
  } else {
  enteredPIN += key; // checks entered pin against Key
  }}
 } 
}

  bool detectMotionWithUltrasonic() {
   digitalWrite(TRIG_PIN, LOW);
   delayMicroseconds(2);
   digitalWrite(TRIG_PIN, HIGH);
   delayMicroseconds(10);
   digitalWrite(TRIG_PIN, LOW);

    long duration = pulseIn(ECHO_PIN, HIGH);
    int distance = duration * 0.034 / 2; // Calculate distance in cm fomual

  // Ignore readings below 10cm
  if (distance < 10) {
  return false;
  }

  return (distance > 10 && distance < 50); // Detect motion between 10 cm and 50 cm
  }

   void triggerAlarm() {
     triggered = true; // turns on the alarm
     Serial.println("INTRUDER DETECTED. Alarm triggered. Enter the PIN to disarm.");
     Serial.print("Triggered Zone: ");
     Serial.println(ZONE_T); // Print the triggered zone
    digitalWrite(GREEN_LED, LOW); // Turn off green LED
}
